import itertools

import pandas
import pytest

from action.create_tables import output_tables, prettify_tables


def test_prettify_tables(crosstab):
    output_str = prettify_tables(
        table=crosstab,
        variables=[crosstab.index.name, crosstab.columns.name],
    )
    assert isinstance(output_str, str)
    assert output_str.startswith("sex vs has_copd")


@pytest.fixture
def path_to_input_csv(tmp_path):
    """Gets a `pathlib.Path` to an input CSV.

    The input CSV is similar to that generated by cohort-extractor from a study
    definition. It exists within a subdirectory of the default base temporary directory,
    which you can override by passing `--basetemp=my_basetemp` to `pytest`.
    """
    sex = {"M", "F"}
    age_band = {"0", "16-29"}
    has_copd = {0, 1}
    patient_records = pandas.DataFrame(
        itertools.product(sex, age_band, has_copd),
        columns=("sex", "age_band", "has_copd"),
    )

    path_to_input_csv = tmp_path / "input.csv"
    patient_records.to_csv(path_to_input_csv, index=False)

    return path_to_input_csv


class TestOutputTables:
    def test_output_two_way(self, path_to_input_csv):
        config = {
            "my_two_way": {
                "tab_type": "2-way",
                "variables": ["sex", "age_band"],
            }
        }
        path_to_output_dir = path_to_input_csv.parent

        output_tables(str(path_to_input_csv), config, path_to_output_dir, 0)

        assert (path_to_output_dir / "table_log.txt").exists()
        assert (path_to_output_dir / "my_two_way" / "sex vs age_band.md").exists()

    def test_output_target_two_way(self, path_to_input_csv):
        config = {
            "my_target_two_way": {
                "tab_type": "target-2-way",
                "target": "has_copd",
                "variables": ["sex", "age_band"],
            }
        }
        path_to_output_dir = path_to_input_csv.parent

        output_tables(str(path_to_input_csv), config, path_to_output_dir, 0)

        assert (path_to_output_dir / "table_log.txt").exists()
        path = path_to_output_dir / "my_target_two_way"
        assert (path / "sex vs has_copd.md").exists()
        assert (path / "age_band vs has_copd.md").exists()

    def test_output_groupby_two_way(self, path_to_input_csv):
        config = {
            "my_groupby_two_way": {
                "tab_type": "groupby-2-way",
                "groupby": "has_copd",
                "variables": ["sex", "age_band"],
            }
        }
        path_to_output_dir = path_to_input_csv.parent

        output_tables(str(path_to_input_csv), config, path_to_output_dir, 0)

        assert (path_to_output_dir / "table_log.txt").exists()
        path = path_to_output_dir / "my_groupby_two_way"
        assert (path / "df_0 - sex vs age_band.md").exists()
        assert (path / "df_1 - sex vs age_band.md").exists()
